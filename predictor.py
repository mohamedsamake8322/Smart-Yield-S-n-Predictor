import torch
import torch.nn as nn
import pandas as pd
import os
import logging

# âœ… DÃ©finition du pÃ©riphÃ©rique (CPU uniquement)
device = torch.device("cpu")

# âœ… Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------- DÃ©tection automatique des colonnes ----------
def detect_input_size(csv_path="data.csv"):
    """DÃ©tecte automatiquement le nombre de colonnes de features du CSV et vÃ©rifie la colonne cible."""
    df = pd.read_csv(csv_path)
    logging.info(f"ðŸ”Ž Colonnes disponibles dans le dataset : {df.columns.tolist()}")

    if "Yield" not in df.columns:
        raise KeyError("ðŸ›‘ Erreur : La colonne 'Yield' n'existe pas dans le dataset. VÃ©rifie ton fichier CSV.")

    input_size = len(df.columns) - 1  # ðŸš€ Ignorer la colonne cible (ex: 'Yield')
    logging.info(f"âœ… DÃ©tection des features : {input_size} colonnes utilisÃ©es pour la prÃ©diction.")
    return input_size, df

# ---------- DÃ©finition du modÃ¨le PyTorch ----------
class PyTorchModel(nn.Module):
    def __init__(self, input_size):
        super(PyTorchModel, self).__init__()

        self.fc1 = nn.Linear(input_size, 64).to(device)
        self.fc2 = nn.Linear(64, 32).to(device)
        self.fc3 = nn.Linear(32, 1).to(device)

    def forward(self, x):
        x = x.to(device)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# ---------- Model Persistence ----------
MODEL_PATH = "model/disease_model.pth"

def load_model(input_size, path=MODEL_PATH):
    """Charge le modÃ¨le PyTorch et vÃ©rifie la compatibilitÃ© avec `input_size`."""
    model = PyTorchModel(input_size)
    if os.path.exists(path):
        try:
            model.load_state_dict(torch.load(path, map_location=device))
            model.eval()
            logging.info(f"âœ… ModÃ¨le PyTorch chargÃ© avec succÃ¨s depuis {path} !")
        except RuntimeError as e:
            logging.error(f"ðŸ›‘ Erreur de chargement du modÃ¨le : {e}")
            exit(1)
    else:
        logging.error(f"ðŸš« ModÃ¨le non trouvÃ© Ã  {path}.")
        exit(1)
    return model

# ---------- Nettoyage automatique du CSV ----------
def clean_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """Nettoie les donnÃ©es pour Ã©viter les erreurs avec PyTorch."""
    logging.info("ðŸ”„ VÃ©rification et nettoyage du dataset...")
    df = df.apply(pd.to_numeric, errors="coerce")
    df.fillna(0, inplace=True)
    logging.info("âœ… Nettoyage terminÃ©.")
    return df

# ---------- Single Prediction ----------
def predict_single(model, features: dict):
    """Effectue une prÃ©diction unique."""
    input_df = pd.DataFrame([features])
    input_df = clean_dataframe(input_df)

    input_tensor = torch.tensor(input_df.values, dtype=torch.float32).to(device)
    prediction = model(input_tensor).item()
    return prediction

# ---------- Batch Prediction ----------
def predict_batch(model, df: pd.DataFrame):
    """Effectue des prÃ©dictions sur plusieurs donnÃ©es."""
    df = clean_dataframe(df)

    required_features = list(df.columns)
    input_tensor = torch.tensor(df[required_features].values, dtype=torch.float32).to(device)
    
    predictions = model(input_tensor).detach().numpy()
    return predictions

# ---------- ExÃ©cution autonome du script ----------
if __name__ == "__main__":
    logging.info("ðŸ”„ DÃ©tection automatique des features...")
    try:
        input_size, df = detect_input_size()
    except KeyError as e:
        logging.error(str(e))
        exit(1)

    logging.info("ðŸ”„ Chargement du modÃ¨le...")
    model = load_model(input_size=input_size)

    # ðŸ”¥ Test rapide de prÃ©diction avec des valeurs fictives
    example_features = {
        "Temperature": 25,
        "Humidity": 60,
        "Precipitation": 12,
        "pH": 6.5,
        "Fertilizer": 80,
        "NDVI": 0.5
    }
    prediction = predict_single(model, example_features)
    logging.info(f"ðŸŒ¾ PrÃ©diction du rendement: {prediction:.2f} tonnes/hectare")
