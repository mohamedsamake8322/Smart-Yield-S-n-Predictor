import torch
import torch.nn as nn
import pandas as pd
import os
import logging
from sklearn.preprocessing import StandardScaler

# âœ… DÃ©finition du pÃ©riphÃ©rique (CPU uniquement)
device = torch.device("cpu")

# âœ… Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ðŸ”Ž DÃ©tection automatique des colonnes
def detect_input_size(csv_path="data.csv"):
    df = pd.read_csv(csv_path)
    logging.info(f"ðŸ”Ž Colonnes disponibles dans le dataset : {df.columns.tolist()}")

    if "yield" not in df.columns:
        raise KeyError("ðŸ›‘ Erreur : La colonne 'yield' n'existe pas dans le dataset. VÃ©rifie ton fichier CSV.")

    input_size = len(df.columns) - 1
    return int(input_size), df  # âœ… Convertir en entier pour Ã©viter lâ€™erreur

# ðŸ”Ž Nettoyage et Normalisation
def clean_and_normalize_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    logging.info("ðŸ”„ VÃ©rification et normalisation du dataset...")

    df = df.apply(pd.to_numeric, errors="coerce")
    df.fillna(0, inplace=True)

    scaler = StandardScaler()
    df[df.columns] = scaler.fit_transform(df[df.columns])  
    logging.info("âœ… Normalisation terminÃ©e.")

    return df

# ðŸ”Ž Conversion des valeurs catÃ©goriques
def convert_categorical_features(features):
    """Convertir `soil_type` et `crop_type` en valeurs numÃ©riques."""
    conversions = {
        "soil_type": {"sandy": 1, "clay": 0},
        "crop_type": {"wheat": 1, "corn": 0}
    }
    for feature in conversions:
        if feature in features:
            features[feature] = conversions[feature].get(features[feature], -1)
    return features

# âœ… DÃ©finition du modÃ¨le PyTorch
class PyTorchModel(nn.Module):
    def __init__(self, input_size):
        super(PyTorchModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 64).to(device)
        self.fc2 = nn.Linear(64, 32).to(device)
        self.fc3 = nn.Linear(32, 1).to(device)
        self.activation = nn.LeakyReLU()
        self.dropout = nn.Dropout(0.3)

    def forward(self, x):
        x = x.to(device)
        x = self.activation(self.fc1(x))
        x = self.dropout(x)
        x = self.activation(self.fc2(x))
        x = self.dropout(x)
        x = self.fc3(x)
        return x

# ðŸ”Ž Sauvegarde et Chargement du modÃ¨le
MODEL_PATH = "model/disease_model.pth"

def save_model(model, path=MODEL_PATH):
    """Sauvegarde correcte du modÃ¨le."""
    torch.save(model.state_dict(), path)
    logging.info(f"âœ… ModÃ¨le PyTorch sauvegardÃ© sous {path}.")

def load_model(input_size, path=MODEL_PATH):
    """Charge le modÃ¨le PyTorch et vÃ©rifie la compatibilitÃ©."""
    model = PyTorchModel(input_size)

    if not os.path.exists(path):
        logging.error(f"ðŸš« ModÃ¨le non trouvÃ© Ã  {path}. VÃ©rifie l'entraÃ®nement.")
        raise FileNotFoundError(f"ModÃ¨le non trouvÃ© : {path}")

    try:
        model.load_state_dict(torch.load(path, map_location=device))
        model.eval()
        logging.info(f"âœ… ModÃ¨le chargÃ© avec succÃ¨s depuis {path} !")
    except RuntimeError as e:
        logging.error(f"ðŸ›‘ Erreur de chargement du modÃ¨le : {e}")
        raise RuntimeError("Le fichier du modÃ¨le n'est pas compatible avec l'architecture actuelle.")
    
    return model

# ðŸ”Ž PrÃ©diction
def predict_single(model, features: dict):
    """Effectue une prÃ©diction unique."""
    features = convert_categorical_features(features)  # âœ… Correction ajoutÃ©e
    input_df = pd.DataFrame([features])
    input_df = clean_and_normalize_dataframe(input_df)

    input_tensor = torch.tensor(input_df.values, dtype=torch.float32).to(device)
    return model(input_tensor).item()

# ðŸ”¥ Test rapide
if __name__ == "__main__":
    logging.info("ðŸ”„ DÃ©tection automatique des features...")
    input_size, df = detect_input_size()

    model = load_model(input_size=input_size)

    example_features = {
        "temperature": 25,
        "humidity": 60,
        "pH": 6.5,
        "rainfall": 12,
        "soil_type": "sandy",
        "crop_type": "wheat"
    }

    example_features = convert_categorical_features(example_features)
    prediction = predict_single(model, example_features)
    logging.info(f"ðŸŒ¾ PrÃ©diction du rendement: {prediction:.2f} tonnes/hectare")
    logging.info("ðŸŽ¯ Script terminÃ© avec succÃ¨s !")
