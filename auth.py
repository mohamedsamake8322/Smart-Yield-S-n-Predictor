import logging
import os
from dotenv import load_dotenv
from flask import Blueprint, request, session, jsonify, redirect, url_for
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from authlib.integrations.flask_client import OAuth

# üîπ Logger configuration (utilisation d'un logger sp√©cifique pour `auth.py`)
logger = logging.getLogger(__name__)

# üîπ Load environment variables
load_dotenv()
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI", "http://127.0.0.1:5000/auth/callback")  # ‚úÖ √âvite la valeur `None`
GOOGLE_AUTH_URL = os.getenv("GOOGLE_AUTH_URL", "https://accounts.google.com/o/oauth2/v2/auth")
GOOGLE_TOKEN_URL = os.getenv("GOOGLE_TOKEN_URL", "https://oauth2.googleapis.com/token")

# üîπ V√©rification des variables OAuth
if not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET or not GOOGLE_REDIRECT_URI:
    logger.error("‚ùå Erreur: Les variables OAuth Google ne sont pas correctement d√©finies dans `.env`!")
else:
    logger.info(f"‚úÖ GOOGLE_CLIENT_ID: {GOOGLE_CLIENT_ID}")
    logger.info(f"‚úÖ GOOGLE_CLIENT_SECRET: [HIDDEN]")
    logger.info(f"‚úÖ GOOGLE_REDIRECT_URI: {GOOGLE_REDIRECT_URI}")
    logger.info(f"‚úÖ GOOGLE_AUTH_URL: {GOOGLE_AUTH_URL}")
    logger.info(f"‚úÖ GOOGLE_TOKEN_URL: {GOOGLE_TOKEN_URL}")

# üîπ Cr√©ation du Blueprint
auth_bp = Blueprint("auth_routes", __name__)

# üîπ Fonction pour r√©cup√©rer `oauth` et √©viter l'importation circulaire
def get_oauth():
    from app import oauth  # ‚úÖ Importer `oauth` seulement quand c'est n√©cessaire
    return oauth

# üîê Initialisation correcte de JWTManager avec Flask
def init_jwt(app):
    jwt = JWTManager(app)  # ‚úÖ JWTManager attach√© correctement √† l'application Flask
    return jwt

# üîπ Google Login Route
@auth_bp.route("/login/google")
def login_google():
    oauth = get_oauth()  # ‚úÖ Utilisation de la fonction pour r√©cup√©rer `oauth`
    redirect_uri = os.getenv("GOOGLE_REDIRECT_URI", "http://127.0.0.1:5000/auth/callback").strip()
    if not redirect_uri or redirect_uri.lower() == "none":
        logger.error("‚ùå GOOGLE_REDIRECT_URI is invalid or missing!")
        return jsonify({"error": "Redirect URI not configured."}), 500
        logger.info(f"üîç Redirection vers Google OAuth: {redirect_uri}")

    if not redirect_uri or redirect_uri == "None":
        logger.error("‚ùå GOOGLE_REDIRECT_URI is invalid or missing!")
        return jsonify({"error": "Redirect URI not configured."}), 500

    return oauth.google.authorize_redirect(redirect_uri)  # ‚úÖ `oauth` est bien d√©fini

# üîπ Google OAuth Callback
@auth_bp.route("/auth/callback")
def auth_callback():
    oauth = get_oauth()  # ‚úÖ R√©cup√©ration de `oauth` au bon moment
    try:
        token = oauth.google.authorize_access_token()
        if not token:
            logger.error("‚ùå √âchec de r√©cup√©ration du token Google OAuth!")
            return jsonify({"error": "‚ùå Authentication failed!"}), 400

        user_info = oauth.google.parse_id_token(token)
        if not user_info:
            logger.error("‚ùå √âchec de r√©cup√©ration des informations utilisateur!")
            return jsonify({"error": "‚ùå Authentication failed!"}), 400

        session["user"] = user_info.get("email", "Unknown")
        jwt_token = create_access_token(identity=user_info.get("email", "Unknown"))

        logger.info(f"‚úÖ Utilisateur `{user_info.get('email', 'Unknown')}` authentifi√© avec succ√®s!")
        return jsonify({
            "access_token": jwt_token,
            "user": user_info.get("email", "Unknown"),
            "message": "‚úÖ Connexion r√©ussie!"
        })

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l‚Äôauthentification : {str(e)}")
        return jsonify({"error": f"‚ùå Internal Server Error - {str(e)}"}), 500

# üîπ Logout
@auth_bp.route("/logout", methods=["GET"])
def logout():
    session.clear()
    logger.info("‚úÖ D√©connexion r√©ussie.")
    return jsonify({"message": "‚úÖ D√©connect√©!"})

# üîπ Protected Route
@auth_bp.route("/protected", methods=["GET"])
@jwt_required()
def protected():
    current_user = get_jwt_identity()
    logger.info(f"üîê Acc√®s autoris√© pour `{current_user}`.")
    return jsonify({"message": f"üîê Bienvenue {current_user}, acc√®s autoris√©!"})
