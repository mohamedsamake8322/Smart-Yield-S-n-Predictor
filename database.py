import sqlite3
import pandas as pd
from datetime import datetime
import logging

# ðŸ“Œ Configuration du logger
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

DB_FILE = "history.db"

# === ðŸ”¹ Initialisation de la base de donnÃ©es ===
def init_db():
    """
    Initialise la base de donnÃ©es SQLite avec les tables nÃ©cessaires.
    """
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS predictions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                features TEXT,
                predicted_yield REAL,
                timestamp TEXT
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS observations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                note TEXT,
                timestamp TEXT
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS field_location (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                latitude REAL,
                longitude REAL
            )
        """)

        conn.commit()
        logging.info("âœ… Base de donnÃ©es initialisÃ©e avec succÃ¨s !")
    except sqlite3.Error as e:
        logging.error(f"ðŸš¨ Erreur lors de l'initialisation de la base de donnÃ©es : {e}")
    finally:
        conn.close()

# === ðŸ”¹ Enregistrer une prÃ©diction ===
def save_prediction(username, features, predicted_yield):
    """
    Enregistre une prÃ©diction dans la base de donnÃ©es.
    """
    timestamp = datetime.now().isoformat()
    features_str = ",".join(map(str, features))  # ðŸ”¹ Convertir `features` en texte

    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO predictions (username, features, predicted_yield, timestamp)
            VALUES (?, ?, ?, ?)
        """, (username, features_str, predicted_yield, timestamp))

        conn.commit()
        logging.info(f"âœ… PrÃ©diction enregistrÃ©e pour {username}.")
    except sqlite3.Error as e:
        logging.error(f"ðŸš¨ Erreur lors de l'enregistrement de la prÃ©diction : {e}")
    finally:
        conn.close()

# === ðŸ”¹ Charger l'historique des prÃ©dictions ===
def load_history():
    """
    Charge toutes les prÃ©dictions depuis la base de donnÃ©es sous forme de DataFrame.
    """
    try:
        conn = sqlite3.connect(DB_FILE)
        df = pd.read_sql_query("SELECT * FROM predictions", conn)
        logging.info("âœ… Historique des prÃ©dictions chargÃ© avec succÃ¨s.")
        return df
    except sqlite3.Error as e:
        logging.error(f"ðŸš¨ Erreur lors du chargement de l'historique : {e}")
        return pd.DataFrame()  # ðŸ”¹ Retourner un DataFrame vide en cas d'erreur
    finally:
        conn.close()

# === ðŸ”¹ Enregistrer une observation ===
def save_observation(name, note):
    """
    Enregistre une observation dans la base de donnÃ©es.
    """
    timestamp = datetime.now().isoformat()
    
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO observations (name, note, timestamp)
            VALUES (?, ?, ?)
        """, (name, note, timestamp))

        conn.commit()
        logging.info(f"âœ… Observation enregistrÃ©e : {name}.")
    except sqlite3.Error as e:
        logging.error(f"ðŸš¨ Erreur lors de l'enregistrement de l'observation : {e}")
    finally:
        conn.close()

# === ðŸ”¹ Enregistrer la localisation ===
def save_location(lat, lon):
    """
    Enregistre une localisation gÃ©ographique.
    """
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO field_location (latitude, longitude)
            VALUES (?, ?)
        """, (lat, lon))

        conn.commit()
        logging.info(f"âœ… Localisation enregistrÃ©e : ({lat}, {lon}).")
    except sqlite3.Error as e:
        logging.error(f"ðŸš¨ Erreur lors de l'enregistrement de la localisation : {e}")
    finally:
        conn.close()

# === ðŸ”¹ RÃ©cupÃ©rer les prÃ©dictions d'un utilisateur ===
def get_user_predictions(username):
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT username, features, predicted_yield, timestamp
            FROM predictions
            WHERE username = ?
            ORDER BY timestamp DESC
        """, (username,))
        
        rows = cursor.fetchall()
        logging.info(f"âœ… PrÃ©dictions rÃ©cupÃ©rÃ©es pour {username}.")
        
        results = [
            {"Username": row[0], "Features": row[1].split(","), "Predicted Yield": row[2], "Timestamp": row[3]}
            for row in rows
        ]
        return results
    except sqlite3.Error as e:
        logging.error(f"ðŸš¨ Erreur lors de la rÃ©cupÃ©ration des prÃ©dictions : {e}")
        return []
    finally:
        conn.close()
